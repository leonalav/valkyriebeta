version: '3.8'

services:
  # LLM Inference API Service
  llm-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: llm-inference-service:latest
    container_name: llm-inference-api
    restart: unless-stopped
    ports:
      - "8000:8000"  # API
      - "8080:8080"  # Metrics
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - MODEL_PATH=/app/models/model.safetensors
      - CORS_ORIGINS=["http://localhost:3000", "https://your-frontend-domain.com"]
      - RATE_LIMIT_RPM=60
      - RATE_LIMIT_BURST=20
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - PROMETHEUS_MULTIPROC_DIR=/tmp/metrics
      - REDIS_URL=redis://redis:6379/0
      - WORKERS=4
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 8G
      
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: llm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-strongpassword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - llm-api
      
  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: llm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - prometheus
      
  # Alert manager for monitoring alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: llm-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
    depends_on:
      - prometheus
      
  # Nginx as reverse proxy and for SSL termination
  nginx:
    image: nginx:alpine
    container_name: llm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
      - ./deployment/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - llm-api
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: llm-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"
    
  # Cadvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: llm-cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
      
volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  alertmanager-data: 